#!/usr/bin/env python

import tempfile
import logging
import glob
import os
import sys
import subprocess as sp
import pandas as pd
import numpy as np

logging.basicConfig(level=20)

bedList = sys.argv[1:] 
qScore = 0.05
boundary = 100
outfile = "/home/jsteenbrugge/degroteswagfile"
H3K4dir = "/home/jsteenbrugge/testdir/bamtest/"

class Peak:
	prefix = ""
	tmpdir = ""
	def __init__(self, fileName,tmpdir):
		self.tmpdir = tmpdir
		self.calPeaks(fileName)

	def calPeaks(self, fileName):
		self.prefix = os.path.basename(fileName).split(".bam")[0]
		CMD = "macs2 callpeak -q {0} -t {1} -n {2} --nomodel --nolambda --verbose=1".format(qScore,fileName, 
                                                                                                    self.tmpdir+"/"+self.prefix)
		sp.call(CMD, shell=True)
		logging.info("Peaks called for: {0}".format(fileName))

	def getPrefix(self):
		return self.prefix

	def compare(self, bed):
		peakName = self.tmpdir+"/"+self.prefix+"_peaks.bed"
		logging.info("comparing {0} with {1}".format(peakName, bed))
		ranges = []
		count=0
		with open(bed) as f:
			for line in f:
				line=line.replace("\n","").split("\t")
				l =[int(line[1]), int(line[2])]
				ranges.append(l)
		with open(peakName) as f:
			for line in f:
				try:
					line = line.replace("\n","").split("\t")
					start = int(line[1])-int(boundary)
					stop = int(line[1])+int(boundary)
					for y,i in enumerate(ranges):
						if (start <= i[0] <= stop) or (start <= i[1] <= stop):
							print("\t".join(line))
                                                        ranges.pop(y)
                                                        count += 1
				except IndexError: 
					pass
		logging.info("Writing count to outfile: {0}".format(count))
		file = open(outfile,"a")
		file.write(os.path.basename(bed).split(".bed")[0]+"\t"+
                                                                      self.prefix.replace("H3K4me3_","")+"\t"+str(count)+"\t"+
                                                                      str(len(ranges))+"\n")

def parseH3K4dir(h3k4dir):
	tmpdir = tempfile.mkdtemp()
	logging.info(tmpdir)
	peakList = []
	for file in glob.glob("{0}H3K4*.bam".format(h3k4dir)):
		peakList.append(Peak(file, tmpdir))
	return peakList, tmpdir

def parseBed(peakList):
	for bed in bedList:
		for peak in peakList:
			peak.compare(bed)

def prepOutfile():
	file = open(outfile,"w")
	file.write("bed\tpeak\th3\ttotal\n")

def close(tmpdir):
	logging.info("Removing: {0}".format(tmpdir))
	sp.call("rm -r {0}".format(tmpdir),shell = True)


if __name__ == "__main__":
	peakList, tmpdir = parseH3K4dir(H3K4dir)
	prepOutfile()
	parseBed(peakList)
	close(tmpdir)



