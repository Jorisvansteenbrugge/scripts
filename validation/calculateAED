#!/usr/bin/env python
import subprocess as sp
import argparse
import tempfile as tp

finaloutfile = None

def arguments():
    parse = argparse.ArgumentParser()
    parse.add_argument("-a", dest="annotation", nargs="+", required = True, help="Space seperated list of annotation bed files")
    parse.add_argument("-d", dest="data", nargs="+",required = True, help="Space seperated list of datafiles to compare to")
    parse.add_argument("-o", dest="output",required = True,help="output file")
    parse.add_argument("--keep", action='store_true', required = False, 
                        help="save intermediate AED scores before statistical test (and not throw them away after). Keeping is recommended because the R script does not work fully yet")
    return parse.parse_args()

def calcAED(overlaps,totalA,totalB):
    try:
        sens = overlaps/float(totalA)
        spes = overlaps/float(totalB)
        return 1-((sens+spes)/2)
    except ZeroDivisionError:
        return "NA"
"""
Performs a second intersect on the exons from each paired gene

"""
def miniIntersect(a, b):
    totalA = 0
    totalB = 0
    overlaps = float(0)
    cmd = "bedtools intersect -wao -a {0} -b {1}".format(a,b)
    out = sp.Popen(cmd, shell = True, stdout = sp.PIPE)
    for i in out.stdout:
        try:  
            line = i.strip().split("\t")       
            overlaps += (float(line[8]))
            totalA += int(line[3])
            totalB += int(line[7])
        except ValueError:
            pass
    return calcAED(overlaps,totalA,totalB)

""" Outfile is a temp file"""
def getExonFiles(bedLine, outfile):
    outfile= open(outfile,"a")
    start = int(bedLine[1])
    blSizes = bedLine[10].split(",")
    blStarts = bedLine[11].split(",")
    for x,y in enumerate(blSizes):
        try:
            size = int(y)
            chr = bedLine[0]
            st = start+int(blStarts[x])
            end = st+size
            outfile.write("{0}\t{1}\t{2}\t{3}\n".format(chr, st, end, y))
        except:
            pass
    outfile.flush()

"""
filters the line from the bedtools intersect output into 2 seperate bed12 lines.
These Lines are finally send to miniIntersect() which intersects the exons for every gene.
"""
def getExonOverlap(line, tpFile):
    exons1 = tp.NamedTemporaryFile(delete=False)
    exons2 = tp.NamedTemporaryFile(delete=False)
    exons1.close()
    exons2.close()

    line = line.strip().split("\t")
    bed1 = line[0:12]
    print("bed1 :"+"\t".join(bed1))
    bed2 = line[12:24]
    getExonFiles(bed1, exons1.name)
    getExonFiles(bed2, exons2.name)
    return miniIntersect(exons1.name, exons2.name)

"""
Intersects the data file with the annotation file.
The output is send to the exonOverlap method
"""
def normalIntersect(a, b, tpFile):
    temp = open(tpFile,"a")
    aeds = []
    cmd = "bedtools intersect -wo -a {0} -b {1}".format(a,b)
    out = sp.Popen(cmd, shell = True, stdout = sp.PIPE)
    aeds.append([str(getExonOverlap(i,tpFile)) for i in out.stdout])
    temp.write("\n".join(aeds[0]))
    temp.flush()

def cleanUp(files):
    [x.close() for x in files]
    [os.remove(x) for x in files]

"""
Launches the compare code per data files with each annotation
The AED scores are stored in a temporary file (tpFile) that is stored in the tmpfiles list.
The user can decide werther to dele or keep the temporary files. 
Currently keeping is recommended as the R script for the final output is not working properly.

"""
def createJobs(annotation,data, deltemp):
    global finaloutfile
    for dat in data:
        tmpfiles = []
        print(dat)
        for anno in annotation:
            tpFile = tp.NamedTemporaryFile(delete=False)

            #used for better output formatting
            tpFile.write("\"{0}\"\n".format(anno.replace(".bed","")))
            tpFile.flush()
            
            tmpfiles.append(tpFile.name)
            normalIntersect(anno, dat,tpFile.name)
        aedFileName = "intermediate_{}".format(finaloutfile)
        sp.call("paste {0} > {1}".format(" ".join(tmpfiles), aedFileName),shell=True)
        try:
            print(temp.name)
            #cleanUp(tmpfiles)
            temp.close()
        except:
            pass


if __name__ == "__main__":
    delete = True
    args = arguments()
    if args.keep:
        delete=False        
    global finaloutfile 
    finaloutfile= args.output
    createJobs(args.annotation,args.data, delete) 
