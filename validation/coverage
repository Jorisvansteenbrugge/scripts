#!/usr/bin/env python
import os
from math import log
import sys
import pandas as pd
import glob
import subprocess as sp
from tempfile import NamedTemporaryFile as tmp

identifier = "xXxcoveragexXx.bed"
rpkmFiles = []
"""
Serves as main function. Calls multiple calculation methods.
"""
def getCoverage(files,bamdir, outfile):
	for i in files:
		#cutted = tmp(delete=False)
		#sp.call("cut -f 1-3 {} > {}".format(i,cutted.name), shell=True)
                print(i)
		outfiles = parseBam(i,bamdir)
                coverageFile = mergeCounts(i, outfiles)
                avgFile,totalReads = getAvgCoverage(coverageFile)
                getRPKM(totalReads, avgFile)
                cleanUp(outfiles)
#		cutted.close()
        paste(outfile)
	
"""
parses the directory with bam files and calculates the coverage for the input bed file
This method is called once per bed file.
"""
def parseBam(bed, bamdir):
        outfiles = []
	for file in glob.glob("*.bam"):
                outfile = file.split(".bam")[0]+identifier
                outfiles.append(bamdir+outfile)
		cmd = "bedtools coverage -abam {0} -b {1}  -counts -d | cut -f 4 > {2}".format(file,bed,outfile)
		sp.call(cmd, shell=True)
        return outfiles

"""
Pastes coverage files together
"""
def mergeCounts(bed, outfiles):
	#take first collumn of bed
        outname = bed.split(".bed")[0]+"_regions.bed"
        regionsCMD = "cat {0} | cut -f 1-3 > {1}".format(bed, outname)
	sp.call(regionsCMD,shell=True)

        #pasta bamfiles
        finalOut = bed.split(".bed")[0]+".coverage"
        pasteCMD = "paste {0} {1} > {2}".format(outname, " ".join(outfiles), finalOut)
        sp.call(pasteCMD, shell=True)

        return finalOut
"""
Based on the coverage file this method calculates the avarage coverage per region for each bam file
"""
def getAvgCoverage(coverageFile):
        outname = coverageFile.split(".coverage")[0]+".avgCoverage"
        outfile = open(outname,"w")

        totalReads = 0
        with open(coverageFile) as file:
                for line in file:
                        line = line.strip().split("\t")
                        pos = line[0:3]
                        cov = line[-1]
			nums = []
                        for i,y in enumerate(cov):
                                try:
					nums.append(int(y))
				except:
					pass
			avg = None
                        try:
				avg = sum(nums)/len(nums)
			except:
				avg = 0
                        totalReads += avg
                        pos.append(str(avg))
                        outfile.write("\t".join(pos)+"\n")

        print("total reads for {}: {}".format(coverageFile,totalReads))
        outfile.close()
        return outname, totalReads
"""
Calculates the RPKM based on the total amount of reads and avagarage coverage 
"""
def getRPKM(totalReads, avgFile):
        outname = avgFile.split(".avgCoverage")[0]+".rpkm"
        outfile = open(outname,"w")
        rpkmFiles.append(outname)
        with open(avgFile) as file:
                outfile.write(os.path.basename(avgFile).split(".avgCoverage")[0]+"\n")
                for line in file:
			rpkm = 0
                        line = line.strip().split("\t")
                        try:
				length = int(line[2]) - int(line[1])
				cov = int(line[3])
				rpkm = (10e9*cov)/(totalReads*length)
			except:
				print(line)
                        outfile.write(str(rpkm)+"\n")
"""

"""
def paste(outfileName):
        print("RPKM files: {0}".format(" ".join(rpkmFiles)))
        #outfileName = "/home/jsteenbrugge/swagboxPlotData.tsv"
        output = open(outfileName,"w")
	output.write('\"Name\"\t\"RPKM log2\"\n')
	for i in rpkmFiles:
		input = open(i)
		first = input.readline().strip()
		for y in input:
			output.write('\"'+first+'\"'+"\t"+y)
#	return pd.read_csv(outfileName, sep='\t')

def cleanUp(outfiles):
        clean = "rm {0}".format(" ".join(outfiles))
        #sp.call(clean, shell=True)

if __name__ == "__main__":
	if len(sys.argv) <2:
		print("Usage: coverage <bamDir> <outfile>  [bed1, bed2, bed3]")
		sys.exit(1)

	bedFiles = sys.argv[3:]
        outfile = sys.argv[2]
	bamdir  = sys.argv[1]
	getCoverage(bedFiles, bamdir, outfile)
